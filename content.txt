ODP content:

import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { OdpoptionsData } from '../data/optionData';

function Content() {
  const navigate = useNavigate();
  const location = useLocation();
  
  // Determine type from current path
  const type = location.pathname.includes('/odp') ? 'odp' : 'hod';

  return (
    <div className="content-page mx-4">
      <div className="container-fluid d-flex flex-column justify-content-center align-items-center py-4">
        <div className="row justify-content-center">
          <div className="w-100 text-center">
            <p className="text-center fw-bolder text-muted mb-5">
              Select an option below to start your training or take a quiz
            </p>
          </div>
        </div>

        <div className="row g-4">
          {OdpoptionsData.map((option) => (
            <div key={option.title} className="col col-md-6">
              <div className="content-card p-4 h-100 text-center">
                <h5 className="card-title card-text mb-3">{option.title}</h5>
                <p className="card-text text-muted">{option.description}</p>
                <div className="mt-3 d-flex justify-content-center gap-3">
                  <button
                    className="btn btn-custom"
                    onClick={() => navigate(`/training/${type}/${option.title}`)}
                  >
                    Training
                  </button>
                  <button
                    className="btn btn-custom"
                    onClick={() => navigate(`/quiz/${type}/${option.title}`)}
                  >
                    Quiz
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default Content;


HAB content:

import React from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { HodoptionsData } from '../data/optionData';

function HodContent() {
  const navigate = useNavigate();
  const location = useLocation();
  
  // Determine type from current path
  const type = location.pathname.includes('/odp') ? 'odp' : 'hod';

  return (
    <div className="content-page mx-4">
      <div className="container-fluid d-flex flex-column justify-content-center align-items-center py-4">
        <div className="row justify-content-center">
          <div className="w-100 text-center">
            <p className="text-center fw-bolder text-muted mb-5">
              Select an option below to start your training or take a quiz
            </p>
          </div>
        </div>

        <div className="row g-4">
          {HodoptionsData.map((option) => (
            <div key={option.title} className="col col-md-6">
              <div className="content-card p-4 h-100 text-center">
                <h5 className="card-title card-text mb-3">{option.title}</h5>
                <p className="card-text text-muted">{option.description}</p>
                <div className="mt-3 d-flex justify-content-center gap-3">
                  <button
                    className="btn btn-custom"
                    onClick={() => navigate(`/training/${type}/${option.title}`)}
                  >
                    Training
                  </button>
                  <button
                    className="btn btn-custom"
                    onClick={() => navigate(`/quiz/${type}/${option.title}`)}
                  >
                    Quiz
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  );
}

export default HodContent;

quiz content :
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { getQuizData} from '../data/odpquizData';
import { HabgetQuizData} from '../data/habquizData';

function Quiz() {
  const { option, type } = useParams(); // Get both type and option from URL
  const navigate = useNavigate();
  const [currentQuestion, setCurrentQuestion] = useState(1);
  const [selectedAnswer, setSelectedAnswer] = useState('');
  const [answers, setAnswers] = useState({});
  const [quizCompleted, setQuizCompleted] = useState(false);
  const [score, setScore] = useState(0);
  const [reviewMode, setReviewMode] = useState(false); // New state for review mode
  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false); // New state to track submission
  
  // Use the type parameter to determine which data to load
  const quizData = type === 'odp' ? getQuizData(option) : HabgetQuizData(option);

  
  useEffect(() => {
    if (answers[currentQuestion]) {
      setSelectedAnswer(answers[currentQuestion]);
    } else {
      setSelectedAnswer('');
    }
  }, [currentQuestion, answers]);

  // Add error handling for missing data
  if (!quizData || !quizData.questions) {
    return (
      <div className="quiz-page mx-2">
        <div className="container-fluid py-4">
          <div className="alert alert-danger">
            <h4>Quiz data not found</h4>
            <p>No quiz data available for "{option}" in {type.toUpperCase()} section.</p>
            <button className="btn btn-secondary" onClick={() => navigate(`/${type}`)}>
              ‚Üê Back to {type.toUpperCase()}
            </button>
          </div>
        </div>
      </div>
    );
  }

  const handleBackToOptions = () => {
    navigate(`/${type}`); // Navigate back to the correct section
  };

  const handleAnswerSelect = (answer) => {
    if (!reviewMode) { // Only allow selection if not in review mode
      setSelectedAnswer(answer);
      setAnswers(prev => ({
        ...prev,
        [currentQuestion]: answer
      }));
    }
  };

  const handleNext = () => {
    if (reviewMode && currentQuestion === quizData.questions.length) {
      // If in review mode and on last question, go back to results
      setQuizCompleted(true);
      setReviewMode(false);
      return;
    }
    
    if (currentQuestion < quizData.questions.length) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      handleSubmitQuiz();
    }
  };

  const handlePrevious = () => {
    if (currentQuestion > 1) {
      setCurrentQuestion(currentQuestion - 1);
    }
  };

  const handleSubmitQuiz = () => {
    let correctAnswers = 0;
    quizData.questions.forEach((question, index) => {
      if (answers[index + 1] === question.correct) {
        correctAnswers++;
      }
    });
    
    const finalScore = correctAnswers;
    setScore(finalScore);
    setQuizCompleted(true);
  };

  const handleRetakeQuiz = () => {
    setCurrentQuestion(1);
    setSelectedAnswer('');
    setAnswers({});
    setQuizCompleted(false);
    setScore(0);
    setReviewMode(false);
    setIsAnswerSubmitted(false);
  };

  // New function to handle "Check Answer" button
  const handleCheckAnswer = () => {
    let correctAnswers = 0;
    quizData.questions.forEach((question, index) => {
      if (answers[index + 1] === question.correct) {
        correctAnswers++;
      }
    });
    
    const finalScore = correctAnswers;
    setScore(finalScore);
    setReviewMode(true);
    setQuizCompleted(false); // Exit completed state to show review
    setCurrentQuestion(1); // Start review from question 1
  };

  // New function to handle "Submit Answer" button
  const handleSubmitAnswer = () => {
    setIsAnswerSubmitted(true);
    // You can add additional logic here, like saving to database
    alert('Quiz submitted successfully!');
  };

  // Function to get option styling based on review mode
  const getOptionStyle = (option) => {
    if (!reviewMode) {
      return selectedAnswer === option ? 'selected' : '';
    }

    const currentQuestionData = quizData.questions[currentQuestion - 1];
    const userAnswer = answers[currentQuestion];
    const correctAnswer = currentQuestionData.correct;

    if (option === correctAnswer) {
      // Correct answer is always green
      return 'correct-answer';
    } else if (option === userAnswer && userAnswer !== correctAnswer) {
      // User's wrong answer is red
      return 'wrong-answer';
    }
    return '';
  };

  if (quizCompleted) {
    return (
      <div className="quiz-page mx-4">
        <div className="container-fluid py-4">
          <div className="row justify-content-center">
            <div className="col-lg-8">
              <div className="card shadow-lg border-0 text-center">
                <div className="card-header text-white quiz-header">
                  <h4 className="mb-0">üéâ Quiz Completed!</h4>
                </div>
                <div className="card-body p-5">
                  <div className="score-display mb-4">
                    <h2 className="display-4 text-primary">{score}/{quizData.questions.length}</h2>
                    <p className="lead">Your Final Score</p>
                  </div>
                  <div className="result-message mb-4">
                    {score >= 8 ? (
                      <div className="alert alert-success">
                        <strong>Excellent!</strong> You've mastered {option}.
                      </div>
                    ) : score >= 6 ? (
                      <div className="alert alert-warning">
                        <strong>Good job!</strong> Consider reviewing the material for {option}.
                      </div>
                    ) : (
                      <div className="alert alert-danger">
                        <strong>Keep learning!</strong> Review the training material for {option}.
                      </div>
                    )}
                  </div>
                  <div className="d-flex justify-content-center gap-2">
                    <button className="btn btn-custom" onClick={handleRetakeQuiz}>
                      Retake Quiz
                    </button>
                    <button className="btn btn-custom" onClick={handleCheckAnswer}>
                      Check Answer
                    </button>
                    <button 
                      className={`btn ${score === quizData.questions.length ? 'btn-success' : 'btn-secondary'}`}
                      onClick={handleSubmitAnswer}
                      disabled={score !== quizData.questions.length || isAnswerSubmitted}
                    >
                      {isAnswerSubmitted ? 'Submitted' : 'Submit Answer'}
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

      </div>
    );
  }

  const currentQuestionData = quizData.questions[currentQuestion - 1];

  // Function to get inline styles for options
  const getInlineStyle = (option) => {
    if (!reviewMode) {
      return { borderRadius: '10px' };
    }

    const currentQuestionData = quizData.questions[currentQuestion - 1];
    const userAnswer = answers[currentQuestion];
    const correctAnswer = currentQuestionData.correct;

    let styles = { 
      borderRadius: '10px',
      cursor: 'default'
    };

    if (option === correctAnswer) {
      styles = {
        ...styles,
        backgroundColor: '#d4edda',
        borderColor: '#28a745',
        color: '#155724'
      };
    } else if (option === userAnswer && userAnswer !== correctAnswer) {
      styles = {
        ...styles,
        backgroundColor: '#f8d7da',
        borderColor: '#dc3545',
        color: '#721c24'
      };
    }

    return styles;
  };

  return (
    <div className="quiz-page">
      <div className="container-fluid py-4">
        <div className="row justify-content-center">
          <div className="col-lg-8">
            <div className="d-flex justify-content-between align-items-center mb-4">
              <h3 className="page-title">
                {reviewMode ? `Review - ${option}` : `Quiz - ${option}`}
              </h3>
              <button 
                className="btn mx-3 btn-secondary back-btn"
                onClick={handleBackToOptions}
              >
                ‚Üê Back 
              </button>
            </div>
            
            <div className="card shadow-lg border-0">
              <div className="card-header text-white quiz-header">
                <div className="d-flex justify-content-between align-items-center">
                  <h4 style={{color:'#87CEEB'}} className="mb-0">
                    {reviewMode ? 'üîç Review Mode' : 'üß† Assessment Quiz'}
                  </h4>
                  <span className="badge bg-light text-dark">
                    Question {currentQuestion} of {quizData.questions.length}
                  </span>
                </div>
              </div>
              
              <div className="card-body p-4">
                <div className="progress mb-4">
                  <div 
                    className="progress-bar bg-success" 
                    role="progressbar" 
                    style={{ width: `${(currentQuestion / quizData.questions.length) * 100}%` }}
                  ></div>
                </div>

                {/* {reviewMode && (
                //   <div className="mb-3">
                //     <div className="alert alert-info">
                //       <small>
                //         <strong>Review Mode:</strong> 
                //         <span className="ms-2 badge bg-success">Green = Correct Answer</span>
                //         <span className="ms-2 badge bg-danger">Red = Your Wrong Answer</span>
                //       </small>
                //     </div>
                //   </div>
                // )} */}

                <h5 className="mb-4 question-text">{currentQuestion}. {currentQuestionData?.question}</h5>
                
                <div className="row g-3">
                  {currentQuestionData?.options.map((optionText, index) => (
                    <div key={index} className="col-12">
                      <div 
                        className={`card answer-option p-3 border-2 ${getOptionStyle(optionText)} ${!reviewMode && selectedAnswer === optionText ? 'selected' : ''}`}
                        onClick={() => handleAnswerSelect(optionText)}
                        style={{
                          ...getInlineStyle(optionText),
                          cursor: reviewMode ? 'default' : 'pointer'
                        }}
                      >
                        <div className="d-flex align-items-center">
                          <span className="answer-text">{optionText}</span>
                          {reviewMode && optionText === currentQuestionData.correct && (
                            <span className="ms-auto badge bg-success">‚úì Correct</span>
                          )}
                          {reviewMode && optionText === answers[currentQuestion] && optionText !== currentQuestionData.correct && (
                            <span className="ms-auto badge bg-danger">‚úó Your Answer</span>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="d-flex justify-content-between mt-4">
                  <button 
                    className={`btn ${currentQuestion === 1?'btn-outline-secondary':'btn-secondary'} `}
                    disabled={currentQuestion === 1}
                    onClick={handlePrevious}
                  >
                    Previous
                  </button>
                  
                  <button 
                    className={`btn btn-sm ${(!selectedAnswer && !reviewMode) ? 'btn-outline-secondary' : 'btn-success'}`}
                    onClick={reviewMode ? handleNext : handleNext}
                    disabled={!selectedAnswer && !reviewMode}
                  >
                    {reviewMode 
                      ? (currentQuestion === quizData.questions.length ? 'Back to Results' : 'Next Question')
                      : (currentQuestion === quizData.questions.length ? 'Submit Quiz' : 'Next Question')
                    }
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Quiz;


training page

import React, { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { OdpgetTrainingData} from '../data/odptrainingData';
import { HabgetTrainingData} from '../data/habtrainingData';

function Training() {
  const { option, type } = useParams();
  const navigate = useNavigate();
  const [currentTopicIndex, setCurrentTopicIndex] = useState(0);
  
  const trainingData = type === 'odp' ? OdpgetTrainingData(option) : HabgetTrainingData(option);

  if (!trainingData) {
    return (
      <div className="training-page mx-2">
        <div className="container-fluid py-4">
          <div className="alert alert-danger">
            <h4>Training data not found</h4>
            <p>No training data available for "{option}" in {type.toUpperCase()} section.</p>
            <button className="btn btn-secondary" onClick={() => navigate(`/${type}`)}>
              ‚Üê Back to {type.toUpperCase()}
            </button>
          </div>
        </div>
      </div>
    );
  }

  const handleBackToOptions = () => {
    navigate(`/${type}`);
  };

  const handleNext = () => {
    if (currentTopicIndex < trainingData.topics.length - 1) {
      setCurrentTopicIndex(currentTopicIndex + 1);
    }
  };

  const handlePrevious = () => {
    if (currentTopicIndex > 0) {
      setCurrentTopicIndex(currentTopicIndex - 1);
    }
  };

  const handleTopicSelect = (index) => {
    setCurrentTopicIndex(index);
  };

  const currentTopic = trainingData.topics && trainingData.topics[currentTopicIndex];
  const totalTopics = trainingData.topics ? trainingData.topics.length : 0;

  return (
    <div className="training-page mx-2">
      <div className="container-fluid py-4">
        <div className="row">
          <div className="col-12">
            {/* Header Section */}
            <div className="training-header-section mb-4">
              <div className="d-flex justify-content-end mb-2">
                <button 
                  className="btn btn-secondary back-btn-top" 
                  onClick={handleBackToOptions}
                >
                  <i className="fa-solid fa-arrow-left me-2"></i>Back 
                </button>
              </div>
              <div className="training-title-section">
                <h2 className="training-main-title mb-2">Training - {option}</h2>
                {trainingData.topics && (
                  <div className="topic-counter-badge">
                    <i className="fa-solid fa-book-open me-2"></i>
                    Topic {currentTopicIndex + 1} of {totalTopics}
                  </div>
                )}
              </div>
            </div>

            {/* Course Overview Card */}
            <div className="card shadow-lg border-0 mb-4">
              <div className="card-header text-white training-header">
                <h4 style={{color:'#87CEEB'}} className="mb-0">üìö Course Overview</h4>
              </div>
              <div className="card-body p-4">
                <div className="row">
                  <div className="col-md-8">
                    <h5 className="text-primary mb-3">About This Course</h5>
                    <p className="mb-4">{trainingData.description}</p>
                    
                    <h6 className="text-secondary mb-3">Learning Objectives:</h6>
                    {trainingData.objective && trainingData.objective.map((objective, objIndex) => (
                      <p className="mb-2" key={objIndex}>
                        <i className="fa-regular fa-circle-dot text-primary me-2"></i>
                        {objective}
                      </p>
                    ))}
                  </div>
                  
                  <div className="col-md-4">
                    <div className="course-details bg-light p-3 rounded">
                      <h6 className="text-secondary mb-3">Course Details</h6>
                      <div className="detail-item mb-2">
                        <strong>Duration:</strong> <span className="text-muted">{trainingData.duration}</span>
                      </div>
                      <div className="detail-item mb-2">
                        <strong>Icebreaker:</strong> <span className="text-muted">{trainingData.icebreaker}</span>
                      </div>
                      {totalTopics > 0 && (
                        <div className="detail-item">
                          <strong>Total Topics:</strong> <span className="text-muted">{totalTopics}</span>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Progress Bar */}
            {totalTopics > 1 && (
              <div className="card shadow-sm border-0 mb-4">
                <div className="card-body p-3">
                  <div className="d-flex justify-content-between align-items-center mb-2">
                    <small className="text-muted">Progress</small>
                    <small className="text-muted">
                      {Math.round(((currentTopicIndex + 1) / totalTopics) * 100)}%
                    </small>
                  </div>
                  <div className="progress" style={{height: '6px'}}>
                    <div 
                      className="progress-bar bg-info" 
                      role="progressbar" 
                      style={{width: `${((currentTopicIndex + 1) / totalTopics) * 100}%`}}
                      aria-valuenow={currentTopicIndex + 1} 
                      aria-valuemin="0" 
                      aria-valuemax={totalTopics}
                    ></div>
                  </div>
                </div>
              </div>
            )}

            {/* Topic Navigation Pills */}
            {totalTopics > 1 && (
              <div className="card shadow-sm border-0 mb-4">
                <div className="card-body p-3">
                  <div className="d-flex flex-wrap gap-2">
                    {trainingData.topics.map((topic, index) => (
                      <button
                        key={index}
                        className={`btn btn-sm ${index === currentTopicIndex ? 'btn-info' : 'btn-outline-info'}`}
                        onClick={() => handleTopicSelect(index)}
                        style={{minWidth: '40px'}}
                      >
                        {index + 1}
                      </button>
                    ))}
                  </div>
                </div>
              </div>
            )}

            {/* Current Topic Content */}
            {currentTopic && (
              <div className='card shadow-lg border-0'>
                <div className="card-header text-white training-header d-flex justify-content-between align-items-center">
                  <h4 style={{color:'#87CEEB'}} className="mb-0">
                    üìù {currentTopic.title}
                  </h4>
                  <small style={{color:'#87CEEB'}}>
                    Topic {currentTopicIndex + 1}/{totalTopics}
                  </small>
                </div>
                <div className="card-body p-0">
                  <div className="training-card-modern p-4">
                    {/* Topic Content */}
                    <div className="topic-content mb-4">
                      {currentTopic.description && currentTopic.description.map((description, descIndex) => (
                        <div className="content-item p-3 mb-3 bg-light rounded" key={descIndex}>
                          <i className="fa-regular fa-lightbulb text-primary me-3"></i>
                          <span>{description}</span>
                        </div>
                      ))}
                    </div>

                    {/* Activity/Scenario Section */}
                    {(currentTopic.activity || currentTopic.scenario) && (
                      <div className="activity-section mb-4">
                        <div className="activity-modern">
                          <div className="d-flex align-items-center mb-3">
                            <i className="fa-solid fa-clipboard-list text-info me-2"></i>
                            <h6 className="mb-0 text-info fw-bold">Activity/Scenario</h6>
                          </div>
                          <div className="activity-content p-3 bg-info-subtle fw-bold rounded border-start border-info border-3">
                            {currentTopic.activity || currentTopic.scenario || "No Activity"}
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Conclusion */}
                    {currentTopic.conclusion && (
                      <div className="conclusion-section">
                        <div className="alert alert-info bg-light border-info">
                          <div className="d-flex align-items-start">
                            <i className="fa-solid fa-key text-info me-3 mt-1"></i>
                            <div>
                              <h6 className="text-info mb-2">Key Takeaway</h6>
                              <p className="mb-0 text-secondary">{currentTopic.conclusion}</p>
                            </div>
                          </div>
                        </div>
                      </div>
                    )}

                    {/* Navigation Buttons */}
                    {totalTopics > 1 && (
                      <div className="d-flex justify-content-between align-items-center mt-4 pt-3 border-top">
                        <button 
                          className="btn btn-outline-secondary"
                          onClick={handlePrevious}
                          disabled={currentTopicIndex === 0}
                        >
                          <i className="fa-solid fa-chevron-left me-2"></i>
                          Previous
                        </button>
                        
                        <span className="text-muted">
                          {currentTopicIndex + 1} / {totalTopics}
                        </span>
                        
                        <button 
                          className="btn btn-primary"
                          onClick={handleNext}
                          disabled={currentTopicIndex === totalTopics - 1}
                        >
                          Next
                          <i className="fa-solid fa-chevron-right ms-2"></i>
                        </button>
                      </div>
                    )}
                  </div>
                </div>
              </div>
            )}

            {/* No Topics Available */}
            {(!trainingData.topics || trainingData.topics.length === 0) && (
              <div className="card shadow-lg border-0">
                <div className="card-body text-center p-5">
                  <i className="fa-solid fa-book-open text-muted mb-3" style={{fontSize: '3rem'}}></i>
                  <h5 className="text-muted">No detailed topics available</h5>
                  <p className="text-muted">This course overview provides all available information.</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
}

export default Training;